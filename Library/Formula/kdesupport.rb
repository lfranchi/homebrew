require 'brewkit'

class Kdesupport <Formula
  @head='svn://anonsvn.kde.org/home/kde/trunk/kdesupport'
  homepage 'http://www.kde.org'

  depends_on 'cmake'
  depends_on 'qt'
  depends_on 'clucene'
  depends_on 'redland'
  depends_on 'shared-mime-info'
  depends_on 'boost'
  
  # the compile test for visibility is borked on osx qt w/ frameworks---it doesn't properly set up the 
  # build command
  # the second patch fixes some type-mismatches with 64-bit field types. reported upstream, remove if/when it gets committed
  def patches
    DATA
  end
  
  def install
    system "cmake . #{std_cmake_parameters}"
    system "make install"
  end
  
  def caveats; <<-EOF
    If strigi fails to build because of an error in strigi/src/daemon/dbus/dbusclientinterface.cpp, the following will fix the problem:
      (the error occurs in an autogenerated file, so we can't just patch it to make it work)
      
      run `brew -vd kdesupport` and when it fails, it will drop you into a prompt. then, edit 
         strigi/src/daemon/dbus/dbusclientinterface.cpp
      and replace "uint64_t mtime;" with "dbusuint64_t mtime;" (~line 149)
      
      EOF
    end
end

__END__
--- a/phonon/CMakeLists.txt	2009-10-04 18:59:19.000000000 -0400
+++ b/phonon/CMakeLists.txt	2009-10-04 21:08:18.000000000 -0400
@@ -120,19 +120,20 @@
       set (KDE4_C_FLAGS "-fvisibility=hidden")
       # check that Qt defines Q_DECL_EXPORT as __attribute__ ((visibility("default")))
       # if it doesn't and KDE compiles with hidden default visibiltiy plugins will break
-      set(_source "#include <QtCore/QtGlobal>\n int main()\n {\n #ifdef QT_VISIBILITY_AVAILABLE \n return 0;\n #else \n return 1; \n #endif \n }\n")
+      set(_source "#include <QtGlobal>\n int main()\n {\n #ifdef QT_VISIBILITY_AVAILABLE \n return 0;\n #else \n return 1; \n #endif \n }\n")
       set(_source_file ${CMAKE_BINARY_DIR}/CMakeTmp/check_qt_visibility.cpp)
       file(WRITE "${_source_file}" "${_source}")
+	message("include dirs: ${QT_INCLUDES}")
       set(_include_dirs "-DINCLUDE_DIRECTORIES:STRING=${QT_INCLUDES}")
 
-      try_run(_run_result _compile_result ${CMAKE_BINARY_DIR} ${_source_file} CMAKE_FLAGS "${_include_dirs}")
+      #try_run(_run_result _compile_result ${CMAKE_BINARY_DIR} ${_source_file} CMAKE_FLAGS "${_include_dirs}")
 
-      if(NOT _compile_result)
-         message(FATAL_ERROR "Could not compile simple test program:\n ${_source}")
-      endif(NOT _compile_result)
-      if(_run_result)
-         message(FATAL_ERROR "Qt compiled without support for -fvisibility=hidden. This will break plugins and linking of some applications. Please fix your Qt installation.")
-      endif(_run_result)
+      #if(NOT _compile_result)
+      #   message(FATAL_ERROR "Could not compile simple test program:\n ${_source}")
+      #endif(NOT _compile_result)
+      #if(_run_result)
+      #   message(FATAL_ERROR "Qt compiled without support for -fvisibility=hidden. This will break plugins and linking of some applications. Please fix your Qt installation.")
+      #endif(_run_result)
 
       if (GCC_IS_NEWER_THAN_4_2)
           set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fvisibility-inlines-hidden")
--- a/strigi/src/daemon/dbus/dbuscpp/dbusmessagereader.cpp	2009-10-04 18:59:12.000000000 -0400
+++ b/strigi/src/daemon/dbus/dbuscpp/dbusmessagereader.cpp	2009-10-04 21:36:26.000000000 -0400
@@ -41,7 +41,7 @@
     return *this;
 }
 DBusMessageReader&
-DBusMessageReader::operator>>(int32_t& s) {
+DBusMessageReader::operator>>(dbus_int32_t& s) {
     if (!isOk()) return *this;
     if (DBUS_TYPE_INT32 != dbus_message_iter_get_arg_type(&it)) {
         close();
@@ -63,7 +63,7 @@
     return *this;
 }
 DBusMessageReader&
-DBusMessageReader::operator>>(int64_t& s) {
+DBusMessageReader::operator>>(dbus_int64_t& s) {
     if (!isOk()) return *this;
     if (DBUS_TYPE_INT64 != dbus_message_iter_get_arg_type(&it)) {
         close();
--- a/strigi/src/daemon/dbus/generated/dbusclientinterface.cpp	(revision 1031423)
+++ b/strigi/src/daemon/dbus/generated/dbusclientinterface.cpp	(working copy)
@@ -145,7 +145,7 @@
     try {
         DBusMessageReader reader(msg);
         std::string path;
-        uint64_t mtime;
+        dbus_uint64_t mtime;
         std::vector<char> content;
         reader >> path >> mtime >> content;
         if (!reader.isOk()) {